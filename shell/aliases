# erict@urict.net .alias file
#   should work in osx and linux
#   aliases at the top, functions at bottom

### Get os name via uname ###
_myos="$(uname)"

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~"

case $_myos in
   Linux)
     alias ls="ls -F --color" ;;
   Darwin)
     alias ls="ls -F -G"
     alias gvim=mvim
     alias gvimdiff=mvimdiff
     # Open file in existing MacVim window
     alias gvim="open -a MacVim"
     # Show/hide hidden files in Finder
     alias showdotfiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
     alias hidedotfiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
     # Hide/show all desktop icons (useful when presenting)
     alias showdeskicons="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
     alias hidedeskicons="defaults write com.apple.finder CreateDesktop -bool false && killall Finder" ;;
   *) ;;
esac

alias la="ls -A"
alias ll="ls -lh"
alias lal="ls -Alh"
alias dusort="du --max-depth=1 | sort -n -r"
alias findmod="find /lib/modules/ -type f -iname '*.o' -or -iname '*.ko'"
#alias perlreplace="perl -pi -e 's/find/replace/g' *.txt"

alias more="less"
alias rmo="rm -i *~"
alias truecrypt="sudo truecrypt"
alias mroe="more"
alias bc="bc -l"
alias grep='grep --colour=auto'
alias xmerge="ACCEPT_KEYWORDS=~x86 emerge"
alias ssh="ssh -XYC"
alias f-spot="dbus-launch f-spot"
alias bi="bundle install"
alias be="bundle exec"
# Release all hosts from today.
#alias release-hosts="grep -oE \"[0-9a-z]{15} \(\" $PATH_TO_BEAKER/log/`date "+%Y-%m-%d*"`/pre_suite-run.log | grep -oE \"[0-9a-z]{15}\" | sort | uniq | xargs -L 1 -I some_vm curl -v -X DELETE --url vcloud/vm/some_vm"
alias notifybeaker='notify_done beaker'
alias git_get_head='git rev-parse HEAD'
alias git_get_remote_head='git ls-remote upstream HEAD'
alias git_changed_tests_csv='git diff --name-only --relative upstream/master | grep tests/ | tr "\r\n" ","'

# move file and symlink to it from og position
function lmv(){ [ -e "$1" -a -e "$2" ] && mv "$1" "$2" && ln -s "$2/$(basename $1)" "$(dirname $1)"; }

# mkdir, cd into it
mkcd () {
  mkdir -p "$*"
  cd "$*"
}

# force mvim to create/open empty files
mvim () {
  local f
  for f; do
    test -e "$f" || touch "$f"
  done
  open -a macvim "$@"
}

# vcloud curl command one-liners
lsvm() {
  curl --url http://vcloud.delivery.puppetlabs.net/vm 2> /dev/null | ruby -e 'require "json"; JSON.parse(STDIN.read).each { |vm| puts vm }'
}

getvm() {
  curl -d --url http://vcloud.delivery.puppetlabs.net/vm/$1 2> /dev/null | ruby -e 'require "json"; resp = JSON.parse(STDIN.read); puts resp[resp.keys[1]]["hostname"] + "." + resp["domain"]'
}

# get beaker log this many backwards from latest
beaker_log_dir() {
  LINE_NUM=$1
  LATEST_CONFIG=$(/bin/ls -t log/ | sed -n "${LINE_NUM}{p;q;}")
  LATEST=$(/bin/ls -t log/$LATEST_CONFIG/ | sed -n "${LINE_NUM}{p;q;}")
  echo "log/$LATEST_CONFIG/$LATEST/"
}

HOST_PATTERN='[0-9a-z]{15}(\.delivery\.puppetlabs\.net)?'
ROLE_PATTERN='\((?!speed,).*?\)'
showvm() {
  if [[ -d log/latest ]]; then
    HOSTS_FROM_LOG=`ack -oh  "$HOST_PATTERN $ROLE_PATTERN" log/latest/sut.log`
  else # beaker-rspec doesn't provide a latest link:
    LATEST_CONFIG=$(/bin/ls -t log/ | sed -n "1{p;q;}")
    LATEST=$(/bin/ls -t log/$LATEST_CONFIG/ | sed -n "1{p;q;}")
    HOSTS_FROM_LOG=`ack -oh  "$HOST_PATTERN $ROLE_PATTERN" log/$LATEST_CONFIG/$LATEST/sut.log`
  fi
  # if hosts variable is not empty/whitespace
  if [[ ! -z "${HOSTS_FROM_LOG// /}" ]]; then
    echo "$HOSTS_FROM_LOG"
  else # fallback if no roles in sut file
    HOSTS_FROM_LOG=`ack -oh  "$HOST_PATTERN" log/latest/sut.log`
    # if hosts variable is not empty/whitespace
    if [[ ! -z "${HOSTS_FROM_LOG// /}" ]]; then
      echo "$HOSTS_FROM_LOG"
    else
      if [[ -f log/latest/*.yaml ]]; then
        ack -oh  "$HOST_PATTERN" *.yaml
      fi
    fi
  fi
}

WIN_PATTERN='\swindows-\d\d\d\d'
# TODO: if no roles set in sut.log but only one hosts, just use that one...
#    if asking for master or database log us into the first one
sshvm() {
  HOSTNAME=`showvm | grep $1 | head -1 | ack -oh  "$HOST_PATTERN"`
  # find out if we're asking to login to a windows host
  USERNAME='root'
  ack -oh "$WIN_PATTERN[^\r\n]*$HOSTNAME" log/latest/sut.log &>/dev/null && USERNAME='Administrator'
  echo "logging us into: $HOSTNAME as $USERNAME"
  # if the host resolves, log us in, otherwise we're asking for a role
  #   the role resolved to a hostname in HOSTNAME var above
  if ! host $1 > /dev/null 2>&1; then
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa-acceptance $USERNAME@$HOSTNAME "${@:2}"
  else
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa-acceptance $USERNAME@$1 "${@:2}"
  fi
}

# TODO: allow roles to be passed to this function like sshvm
rmvm() {
  curl -X DELETE --url http://vcloud.delivery.puppetlabs.net/vm/$1 ; echo""
}

# TODO: make some pretty/informative output
killvm() {
  showvm | ack -oh  "$HOST_PATTERN" | { while read i ; do curl -X DELETE --url vcloud/vm/$i ; done };echo""
}
# Release all hosts from today.
#alias release-hosts="grep -oE \"[0-9a-z]{15} \(\" $PATH_TO_BEAKER/log/`date "+%Y-%m-%d*"`/pre_suite-run.log | grep -oE \"[0-9a-z]{15}\" | sort | uniq | xargs -L 1 -I some_vm curl -v -X DELETE --url vcloud/vm/some_vm"

# ${var^} doesn't work in bash < 4, default in osx :-(
first_char_toupper() {
first=`echo $1 | cut -c1 | tr [a-z] [A-Z]`
second=`echo $1 | cut -c2-`
echo $first$second
}

# get latest agent sha given component branch name
get_latest_sha() {
  JENKINS_URL='jenkins.puppetlabs.com/view/All%20in%20One%20Agent/view/'
  branch_name=$1
  BRANCH_NAME=`first_char_toupper $branch_name`
  SHORT_SHA=`curl --silent --url curl https://${JENKINS_URL}/${BRANCH_NAME}/view/Puppet/job/platform_aio-puppet_pkg-promote_${branch_name}/lastSuccessfulBuild/ | grep --extended --only-matching 'Build\/\">#\d+\s+\w+' | awk -F ' ' '{print $2}'`
  curl --silent --url 'http://builds.puppetlabs.lan/puppet-agent/?C=M;O=D' | grep --extended --only-matching "$SHORT_SHA\w+" | head -n 1
}
